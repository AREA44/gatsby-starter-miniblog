{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-7fb07a39c31035f1c73f.js","mappings":"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","sources":["webpack://gatsby-starter-anima/./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/list.tsx","webpack://gatsby-starter-anima/./src/@lekoarts/gatsby-theme-minimal-blog/texts/bottom.mdx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/homepage.tsx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack://gatsby-starter-anima/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: `bold`,\n      color: `heading`\n    }} mdxType=\"Text\">\n  Hi.\n    </Text>\n    <p>{`Here will a live code example go:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"react-live\",\n        \"react-live\": true\n      }}>{`const onClick = () => {\n  alert(\"You opened me\");\n};\nrender(<button onClick={onClick}>Alohomora!</button>);\n`}</code></pre>\n    <p>{`Here will a normal code block go:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`(function() {\n\nvar cache = {};\nvar form = $('form');\nvar minified = true;\n\nvar dependencies = {};\n\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\nvar treePromise = new Promise(function(resolve) {\n  $u.xhr({\n    url: treeURL,\n    callback: function(xhr) {\n      if (xhr.status < 400) {\n        resolve(JSON.parse(xhr.responseText).tree);\n      }\n    }\n  });\n});\n`}</code></pre>\n    <p>{`A code block with a JSDoc comment, short, and long comment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * Get value out of string (e.g. rem => px)\n * If value is px strip the px part\n * If the input is already a number only return that value\n * @param {string | number} input\n * @param {number} [rootFontSize]\n * @return {number} Number without last three characters\n * @example removeLastThree('6rem') => 6\n */\nconst getValue = (input, rootFontSize = 16) => {\n  if (typeof input === \\`number\\`) {\n    return input / rootFontSize;\n  }\n\n  const isPxValue = input.slice(-2) === \\`px\\`;\n\n  if (isPxValue) {\n    return parseFloat(input.slice(0, -2));\n  }\n\n  return parseFloat(input.slice(0, -3));\n};\n\n// This is a little helper function\nconst helper = (a, b) => a + b;\n\n// This is also a little helper function but this time with a really long one-line comment that should show some more details\nconst morehelper = (a, b) => a * b;\n\nexport { getValue, helper, morehelper };\n`}</code></pre>\n    <p>{`Normal block without language:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import Test from \"../components/test\"\n\nconst Layout = ({ children }) => (\n  <Test>\n    {children}\n  </Test>\n)\n\nexport default Layout\n`}</code></pre>\n    <p>{`Code block with code highlighting:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx:title=src/components/post.jsx\",\n        \"metastring\": \"{5-7,10}\",\n        \"{5-7,10}\": true\n      }}>{`import * as React from \"react\";\n\nconst Post = ({ data: { post } }) => (\n  <Layout>\n    <Heading variant=\"h2\" as=\"h2\">\n      {post.title}\n    </Heading>\n    <p\n      sx={{\n        color: \\`secondary\\`,\n        mt: 3,\n        a: { color: \\`secondary\\` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <span>{post.date}</span>\n      {post.tags && (\n        <React.Fragment>\n          {\\` â€” \\`}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n    <section\n      sx={{\n        ...CodeStyles,\n        my: 5,\n        \".gatsby-resp-image-wrapper\": { my: 5, boxShadow: \\`lg\\` },\n      }}\n    >\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </section>\n  </Layout>\n);\n\nexport default Post;\n`}</code></pre>\n    <p>{`Code block without title:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Harry Potter and the Philosopher's Stone\n`}</code></pre>\n    <p>{`Code block without lineNumbers (but lang):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\",\n        \"metastring\": \"noLineNumbers\",\n        \"noLineNumbers\": true\n      }}>{`Harry Potter and the Chamber of Secrets\n`}</code></pre>\n    <p>{`Code block without lineNumbers (and without lang):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-noLineNumbers\"\n      }}>{`Harry Potter and the Chamber of Secrets\n`}</code></pre>\n    <p>{`Code block with only the title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-:title=src/utils/scream.js\"\n      }}>{`const scream = (input) => window.alert(input)\n`}</code></pre>\n    <p>{`Code block with only the title but without lineNumbers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-:title=src/utils/scream.js\",\n        \"metastring\": \"noLineNumbers\",\n        \"noLineNumbers\": true\n      }}>{`const scream = (input) => window.alert(input)\n`}</code></pre>\n    <p>{`Line highlighting without code title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"{2,4-5}\",\n        \"{2,4-5}\": true\n      }}>{`const test = 3;\nconst foo = \"bar\";\nconst harry = \"potter\";\nconst hermione = \"granger\";\nconst ron = \"weasley\";\n`}</code></pre>\n    <p>{`Here will `}<inlineCode parentName=\"p\">{`inline code`}</inlineCode>{` go, just inside the text. Wow!`}</p>\n    <p>{`Code block without line numbers but with highlighting, language, and title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx:title=src/components/blog.tsx\",\n        \"metastring\": \"{7-9,16} noLineNumbers\",\n        \"{7-9,16}\": true,\n        \"noLineNumbers\": true\n      }}>{`import * as React from \"react\";\n\nconst Blog = ({ posts }: PostsProps) => {\n  const { tagsPath, basePath } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <Flex sx={{ alignItems: \\`center\\`, justifyContent: \\`space-between\\` }}>\n        <Heading variant=\"h2\" as=\"h2\">\n          Blog\n        </Heading>\n        <Styled.a\n          as={Link}\n          sx={{ variant: \\`links.secondary\\` }}\n          to={\\`/\\${basePath}/\\${tagsPath}\\`.replace(/\\\\/\\\\/+/g, \\`/\\`)}\n        >\n          View all tags\n        </Styled.a>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  );\n};\n\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx } from \"theme-ui\"\n\ntype ListProps = {\n  children: React.ReactNode\n}\n\nconst List = ({ children }: ListProps) => (\n  <section\n    sx={{\n      mb: [5, 5, 6],\n      ul: { margin: 0, padding: 0 },\n      li: { listStyle: `none`, mb: 3, a: { variant: `links.listItem` } },\n      variant: `section_bottom`,\n    }}\n  >\n    {children}\n  </section>\n)\n\nexport default List\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Title = makeShortcode(\"Title\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Title text=\"Projects\" mdxType=\"Title\" />\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AREA44\"\n        }}>{`This is AREA44.`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport Title from \"./title\"\nimport Listing from \"./listing\"\nimport List from \"./list\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport { visuallyHidden } from \"../styles/utils\"\n// @ts-ignore\nimport Hero from \"../texts/hero\"\n// @ts-ignore\nimport Bottom from \"../texts/bottom\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section sx={{ mb: [5, 6, 7], p: { fontSize: [1, 2, 3], mt: 2 }, variant: `section_hero` }}>\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>Read all posts</Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      <List>\n        <Bottom />\n      </List>\n    </Layout>\n  )\n}\n\nexport default Homepage\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx, Box } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Link to={post.slug} sx={(t) => ({ ...t.styles?.a, fontSize: [1, 2, 3], color: `text` })}>\n      {post.title}\n    </Link>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"names":["name","children","sx","mb","ul","margin","padding","li","listStyle","a","variant","Text","props","console","warn","layoutProps","MDXContent","components","mdxType","fontSize","fontWeight","color","parentName","isMDXComponent","Title","makeShortcode","_frontmatter","text","posts","useMinimalBlogConfig","basePath","blogPath","siteTitle","useSiteMetadata","visuallyHidden","p","mt","Link","to","replaceSlashes","showTags","allPost","data","nodes","tags","tagsPath","map","tag","i","key","slug","t","styles","post","title","date","className"],"sourceRoot":""}